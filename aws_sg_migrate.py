#!/usr/bin/python

import sys, os, stat, re, subprocess, getopt, json
regions={'us-east-2':'vpc-b5eb1fdc','us-east-1':'vpc-7a2eac1d','us-west-1':'vpc-09735b6c','us-west-2':'vpc-5eb6cc3a','ap-south-1':'vpc-4209e02b','ap-northeast-2':'vpc-3954e850','ap-southeast-1':'vpc-c20d13a7','ap-southeast-2':'vpc-4e0c3a2b','ap-northeast-1':'vpc-2dadad48','ca-central-1':'vpc-1beb6f72','eu-central-1':'vpc-88b78fe1','eu-west-1':'vpc-73aa0e17', 'eu-west-2':'vpc-0c1be165','sa-east-1':'vpc-f405ee90'}

def makesg(profile, sgid, vpcid, source, dest, shell):
    
    script = open('%s.sh' % sgid, 'w')
    if source:
        cmd = [ 'aws', 'ec2', 'describe-security-groups', '--region=%s' % source, '--group-id=%s' % sgid, '--output=json', ]
    else:
        cmd = [ 'aws', 'ec2', 'describe-security-groups', '--group-id=%s' % sgid, '--output=json', ]
    
    if profile:
        cmd.append('--profile')
        cmd.append(profile)
    ap = subprocess.check_output(cmd)
    
    data = json.loads(ap.decode('utf-8'))
    
    if 'SecurityGroups' not in data:
        print("Internal error: no SecurityGroups key in data")
        sys.exit(3)
    sg1 = data['SecurityGroups'][0]
    groupName = sg1['GroupName'] + '_migrated'
    groupDesc = sg1['Description']

    # Sanity check
    for ipp in sg1['IpPermissions']:
        if 'FromPort' not in ipp:   continue
        if 'IpProtocol' not in ipp:   continue
        if 'IpRanges' not in ipp:   continue
        if 'ToPort' not in ipp:   continue
        if len(ipp['UserIdGroupPairs']) > 0:
            sys.stderr.write("Warning: ignoring User Id info\n")
        for ipr in ipp['IpRanges']:
            for k in ipr.keys():
                if k != 'CidrIp':
                    sys.stderr.write("Error: Don't know how to handle")
                    sys.stderr.write("key %s in IpRanges\n" % (k))
                    sys.exit(4)
        # if ipp['IpProtocol'] != 'icmp' and ipp['ToPort'] != ipp['FromPort']:
    for ipp in sg1['IpPermissionsEgress']:
        if 'FromPort' not in ipp:   continue
        if 'IpProtocol' not in ipp:   continue
        if 'IpRanges' not in ipp:   continue
        if 'ToPort' not in ipp:   continue
        if len(ipp['UserIdGroupPairs']) > 0:
            sys.stderr.write("Warning: ignoring User Id info\n")
        for ipr in ipp['IpRanges']:
            for k in ipr.keys():
                if k != 'CidrIp':
                    sys.stderr.write("Error: Don't know how to handle")
                    sys.stderr.write("key %s in IpRanges\n" % (k))
                    sys.exit(4) 

#    if dest:
#        cmd = "aws ec2 describe-vpcs"
#        if shell:
#            print("vpcout=(`%s --region '%s' --output text`)" % (cmd, dest))
#        else:
#            print("%s --region '%s' --output text" % (cmd, dest))
#    print('VPCID=$vpcout', file=script)
    destinations = []   

    if shell:
        print("# Commands auto-generated by the copysg.py script", file=script)
        print(" ", file=script)
    if dest is None:
        destinations = regions
    for dest,vpc in destinations.items():
        create_cmd = "aws ec2 create-security-group --vpc-id=%s" % (vpc)
        if shell:
            print("sgout=(`%s --group-name='%s' --region %s --description='%s' --output table`)" % (create_cmd, groupName, dest, groupDesc), file=script)
            print('if [ $? != 0 ]; then', file=script)
            print('   echo "Error: %s failed"' % (cmd), file=script)
            print('   exit 1', file=script)
            print('fi', file=script)
            print('if [ "${sgout[6]}" != \'GroupId\' ]; then', file=script)
            print('   echo "Error: expected \'GroupId\', got ${sgout[6]}"', file=script)
            print('   exit 1', file=script)
            print('fi', file=script)
            print('SGID=${sgout[8]}', file=script)
        else:
            print("%s --group-name='%s' --region %s --description='%s'" % (cmd, groupName, dest, groupDesc), file=script)

        for ipp in sg1['IpPermissions']:
            if 'FromPort' not in ipp:   continue
            if 'IpProtocol' not in ipp:   continue
            if 'IpRanges' not in ipp:   continue
            if 'ToPort' not in ipp:   continue
            for ipr in ipp['IpRanges']:
                cidr = ipr['CidrIp']

                cmd = "aws ec2 authorize-security-group-ingress"
                if shell:
                    print("%s --region %s --group-id=$SGID --protocol='%s'" % (cmd, dest, ipp['IpProtocol']),end=" ", file=script)
                else:
                    print("%s --region %s --group-id=PUT_SG_ID_HERE --protocol='%s'" % (cmd, dest, ipp['IpProtocol']),end=" ", file=script)
                if ipp['ToPort'] < 0:
                    # ICMP ToPort was -1 ???
                    ipp['ToPort'] = ipp['FromPort']
                if ipp['FromPort'] != ipp['ToPort']:
                    print("--port=%s-%s" % (ipp['FromPort'], ipp['ToPort']),end=" ", file=script)
                else:
                    print("--port=%s" % (ipp['FromPort']),end=" ", file=script)
                    print("--cidr=%s" % (ipr['CidrIp']), file=script)
                if shell:
                    print('if [ $? != 0 ]; then', file=script)
                    print('   echo "Error: %s failed"' % (cmd), file=script)
                    print('   exit 1', file=script)
                    print('fi', file=script)

        for ipp in sg1['IpPermissionsEgress']:
            if 'FromPort' not in ipp:   continue
            if 'IpProtocol' not in ipp:   continue
            if 'IpRanges' not in ipp:   continue
            if 'ToPort' not in ipp:   continue
            for ipr in ipp['IpRanges']:
                cidr = ipr['CidrIp']

                cmd = "aws ec2 authorize-security-group-egress"
                if shell:
                    print("%s --region %s --group-id=$SGID --protocol='%s'" % (cmd, dest, ipp['IpProtocol']), end=" ", file=script)
                else:
                    print("%s --region %s --group-id=PUT_SG_ID_HERE --protocol='%s'" % (cmd, dest, ipp['IpProtocol']), end=" ", file=script)
                if ipp['ToPort'] < 0:
                    # ICMP ToPort was -1 ???
                    ipp['ToPort'] = ipp['FromPort']
                if ipp['FromPort'] != ipp['ToPort']:
                    print("--port=%s-%s" % (ipp['FromPort'], ipp['ToPort']),end=" ", file=script)
                else:
                    print("--port=%s" % (ipp['FromPort']),end=" ", file=script)
                    print("--cidr=%s" % (ipr['CidrIp']), file=script)
                if shell:
                    print('if [ $? != 0 ]; then')
                    print('   echo "Error: %s failed"' % (cmd))
                    print('   exit 1', file=script)
                    print('fi', file=script)

        if 'Tags' in sg1:
            for tag in sg1['Tags']:
                if 'Key' in tag and tag['Key'] == 'Name':
                    if shell:
                        print("aws ec2 create-tags --resources $SGID",end=" ", file=script)
                        print('--tags "Key=Name,Value=%s"' % (tag['Value']), file=script)
                    else:
                        print("aws ec2 create-tags --resources PUT_SG_ID_HERE",end=" ", file=script)
                        print('--tags "Key=Name,Value=%s"' % (tag['Value']), file=script)

        #setting script permissions
        os.chmod(script.name, 0o755)
        

###############################  MAIN  #######################################


def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hp:sv:", [ "help", "profile=", "shell", "vpc=", "src=", "dest=", ])
    except getopt.GetoptError:
        usage()
        sys.exit(2)
    
    profile = None
    vpcid = None
    shell = False
    source = None
    destination = None
    for o,a in opts:
        if o in ("-h", "--help"):
            usage()
            return
        if o in ("-p", "--profile"):
            profile = a
        if o in ("-s", "--shell"):
            shell = True
        if o in ("-sc", "--src"):
            source = a
        if o in ("-ds", "--dest"):
            destination = a
        if o in ("-v", "--vpc"):
            vpcid = a

    if len(args) != 1:
        print("ERROR: You must give a security group id", file=script)
        usage()
        sys.exit(1)
    sgid = args[0]

    makesg(profile, sgid, vpcid, source, destination, shell)


def usage():
    print("copysg.py [-h] [--profile=alt_profile] [--shell] [--vpc=vpcid] [-src=source_region] [--dest=dest_region]", end=" ")
    print("sg_id")
    print("    -h - help")
    print("    --profile (or -p) - use alternate aws cli profile")
    print("    --shell (or -s)   - wrap commands in shell syntax to capture id")
    print("    --vpc   (or -v)   - specify destination VPC ID for new SG")
    print("    --src   (or -sc)  - specify source region for new SG")
    print("    --dest  (or -ds)  - specify destination region for new SG")

if __name__ == "__main__":
    main()
